/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  CosmWasmClient,
  SigningCosmWasmClient,
  ExecuteResult,
} from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {
  InstantiateMsg,
  ExecuteMsg,
  UpdateParamsMsg,
  SendToSunriseMsg,
  QueryMsg,
  Addr,
  Params,
} from "./SunriseSwapAdapter.types";
export interface SunriseSwapAdapterReadOnlyInterface {
  contractAddress: string;
  params: () => Promise<Params>;
}
export class SunriseSwapAdapterQueryClient
  implements SunriseSwapAdapterReadOnlyInterface
{
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.params = this.params.bind(this);
  }

  params = async (): Promise<Params> => {
    return this.client.queryContractSmart(this.contractAddress, {
      params: {},
    });
  };
}
export interface SunriseSwapAdapterInterface
  extends SunriseSwapAdapterReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateParams: (
    {
      authority,
    }: {
      authority?: string;
    },
    fee?: number | StdFee | "auto",
    txMemo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  SendToSunrise: (
    {
      channelId,
      memo,
      sunriseAddress,
    }: {
      channelId: string;
      memo: string;
      sunriseAddress: string;
    },
    fee?: number | StdFee | "auto",
    txMemo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
}
export class SunriseSwapAdapterClient
  extends SunriseSwapAdapterQueryClient
  implements SunriseSwapAdapterInterface
{
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string
  ) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateParams = this.updateParams.bind(this);
    this.SendToSunrise = this.SendToSunrise.bind(this);
  }

  updateParams = async (
    {
      authority,
    }: {
      authority?: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_params: {
          authority,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  SendToSunrise = async (
    {
      channelId,
      memo,
      sunriseAddress,
    }: {
      channelId: string;
      memo: string;
      sunriseAddress: string;
    },
    fee: number | StdFee | "auto" = "auto",
    txMemo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        send_to_sunrise: {
          channel_id: channelId,
          memo,
          sunrise_address: sunriseAddress,
        },
      },
      fee,
      txMemo,
      _funds
    );
  };
}
